// Generated by typings
// Source: https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/1b30c8e5c2aa0e179a1b82d7f337124721be2aa6/isomorphic-fetch/index.d.ts
interface ForEachCallback {
    (keyId: any, status: string): void;
}

interface Headers {
    append(name: string, value: string): void;
    delete(name: string): void;
    forEach(callback: ForEachCallback): void;
    get(name: string): string | null;
    has(name: string): boolean;
    set(name: string, value: string): void;
}

declare var Headers: {
    prototype: Headers;
    new(init?: any): Headers;
}

interface Blob {
}

interface Body {
}

interface RequestInit {
}

interface Request extends Object, Body {
}

declare var Request: {
    prototype: Request;
    new(input: Request | string, init?: RequestInit): Request;
}

interface ReadableStream {
    readonly locked: boolean;
    cancel(): Promise<void>;
}

interface ResponseInit {
    status?: number;
    statusText?: string;
    headers?: any;
}

interface Response extends Object, Body {
}



interface GlobalFetch {
    fetch(input: Request | string, init?: RequestInit): Promise<any>;
}

interface Window extends GlobalFetch {
}

declare function fetch(input: Request | string, init?: RequestInit): Promise<any>;

declare module "isomorphic-fetch" {
    namespace _fetch { }
    const _fetch: typeof fetch;
    export = _fetch;
}
